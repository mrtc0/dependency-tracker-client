=begin
#Dependency-Track API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.8.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module DependencyTracker
  class ConfigPropertyApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of all ConfigProperties for the specified groupName
    # @param [Hash] opts the optional parameters
    # @return [Array<ConfigProperty>]
    def get_config_properties(opts = {})
      data, _status_code, _headers = get_config_properties_with_http_info(opts)
      data
    end

    # Returns a list of all ConfigProperties for the specified groupName
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ConfigProperty>, Integer, Hash)>] Array<ConfigProperty> data, response status code and response headers
    def get_config_properties_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigPropertyApi.get_config_properties ...'
      end
      # resource path
      local_var_path = '/v1/configProperty'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<ConfigProperty>' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigPropertyApi#get_config_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a config property
    # @param [Hash] opts the optional parameters
    # @option opts [ConfigProperty] :body 
    # @return [ConfigProperty]
    def update_config_property(opts = {})
      data, _status_code, _headers = update_config_property_with_http_info(opts)
      data
    end

    # Updates a config property
    # @param [Hash] opts the optional parameters
    # @option opts [ConfigProperty] :body 
    # @return [Array<(ConfigProperty, Integer, Hash)>] ConfigProperty data, response status code and response headers
    def update_config_property_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigPropertyApi.update_config_property ...'
      end
      # resource path
      local_var_path = '/v1/configProperty'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'ConfigProperty' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigPropertyApi#update_config_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an array of config properties
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ConfigProperty>] :body 
    # @return [Array<ConfigProperty>]
    def update_config_property1(opts = {})
      data, _status_code, _headers = update_config_property1_with_http_info(opts)
      data
    end

    # Updates an array of config properties
    # @param [Hash] opts the optional parameters
    # @option opts [Array<ConfigProperty>] :body 
    # @return [Array<(Array<ConfigProperty>, Integer, Hash)>] Array<ConfigProperty> data, response status code and response headers
    def update_config_property1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ConfigPropertyApi.update_config_property1 ...'
      end
      # resource path
      local_var_path = '/v1/configProperty/aggregate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'Array<ConfigProperty>' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigPropertyApi#update_config_property1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

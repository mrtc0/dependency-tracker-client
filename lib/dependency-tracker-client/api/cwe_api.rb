=begin
#Dependency-Track API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.8.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module DependencyTracker
  class CweApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a specific CWE
    # @param cwe_id [Integer] The CWE ID of the CWE to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Cwe]
    def get_cwe(cwe_id, opts = {})
      data, _status_code, _headers = get_cwe_with_http_info(cwe_id, opts)
      data
    end

    # Returns a specific CWE
    # @param cwe_id [Integer] The CWE ID of the CWE to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(Cwe, Integer, Hash)>] Cwe data, response status code and response headers
    def get_cwe_with_http_info(cwe_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CweApi.get_cwe ...'
      end
      # verify the required parameter 'cwe_id' is set
      if @api_client.config.client_side_validation && cwe_id.nil?
        fail ArgumentError, "Missing the required parameter 'cwe_id' when calling CweApi.get_cwe"
      end
      # resource path
      local_var_path = '/v1/cwe/{cweId}'.sub('{' + 'cweId' + '}', CGI.escape(cwe_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Cwe' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CweApi#get_cwe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of all CWEs
    # @param [Hash] opts the optional parameters
    # @return [Array<Cwe>]
    def get_cwes(opts = {})
      data, _status_code, _headers = get_cwes_with_http_info(opts)
      data
    end

    # Returns a list of all CWEs
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Cwe>, Integer, Hash)>] Array<Cwe> data, response status code and response headers
    def get_cwes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CweApi.get_cwes ...'
      end
      # resource path
      local_var_path = '/v1/cwe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Cwe>' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CweApi#get_cwes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

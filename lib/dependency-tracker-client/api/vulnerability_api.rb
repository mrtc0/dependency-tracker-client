=begin
#Dependency-Track API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.8.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module DependencyTracker
  class VulnerabilityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Assigns a vulnerability to a component
    # @param source [String] The vulnerability source
    # @param vuln_id [String] The vulnId
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def assign_vulnerability(source, vuln_id, component, opts = {})
      assign_vulnerability_with_http_info(source, vuln_id, component, opts)
      nil
    end

    # Assigns a vulnerability to a component
    # @param source [String] The vulnerability source
    # @param vuln_id [String] The vulnId
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def assign_vulnerability_with_http_info(source, vuln_id, component, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.assign_vulnerability ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling VulnerabilityApi.assign_vulnerability"
      end
      # verify the required parameter 'vuln_id' is set
      if @api_client.config.client_side_validation && vuln_id.nil?
        fail ArgumentError, "Missing the required parameter 'vuln_id' when calling VulnerabilityApi.assign_vulnerability"
      end
      # verify the required parameter 'component' is set
      if @api_client.config.client_side_validation && component.nil?
        fail ArgumentError, "Missing the required parameter 'component' when calling VulnerabilityApi.assign_vulnerability"
      end
      # resource path
      local_var_path = '/v1/vulnerability/source/{source}/vuln/{vulnId}/component/{component}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'vulnId' + '}', CGI.escape(vuln_id.to_s)).sub('{' + 'component' + '}', CGI.escape(component.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#assign_vulnerability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Assigns a vulnerability to a component
    # @param uuid [String] The UUID of the vulnerability
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def assign_vulnerability1(uuid, component, opts = {})
      assign_vulnerability1_with_http_info(uuid, component, opts)
      nil
    end

    # Assigns a vulnerability to a component
    # @param uuid [String] The UUID of the vulnerability
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def assign_vulnerability1_with_http_info(uuid, component, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.assign_vulnerability1 ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VulnerabilityApi.assign_vulnerability1"
      end
      # verify the required parameter 'component' is set
      if @api_client.config.client_side_validation && component.nil?
        fail ArgumentError, "Missing the required parameter 'component' when calling VulnerabilityApi.assign_vulnerability1"
      end
      # resource path
      local_var_path = '/v1/vulnerability/{uuid}/component/{component}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'component' + '}', CGI.escape(component.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#assign_vulnerability1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new vulnerability
    # @param [Hash] opts the optional parameters
    # @option opts [Vulnerability] :body 
    # @return [Vulnerability]
    def create_vulnerability(opts = {})
      data, _status_code, _headers = create_vulnerability_with_http_info(opts)
      data
    end

    # Creates a new vulnerability
    # @param [Hash] opts the optional parameters
    # @option opts [Vulnerability] :body 
    # @return [Array<(Vulnerability, Integer, Hash)>] Vulnerability data, response status code and response headers
    def create_vulnerability_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.create_vulnerability ...'
      end
      # resource path
      local_var_path = '/v1/vulnerability'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'Vulnerability' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#create_vulnerability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of all projects affected by a specific vulnerability
    # @param source [String] 
    # @param vuln [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Project>]
    def get_affected_project(source, vuln, opts = {})
      data, _status_code, _headers = get_affected_project_with_http_info(source, vuln, opts)
      data
    end

    # Returns a list of all projects affected by a specific vulnerability
    # @param source [String] 
    # @param vuln [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Project>, Integer, Hash)>] Array<Project> data, response status code and response headers
    def get_affected_project_with_http_info(source, vuln, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_affected_project ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling VulnerabilityApi.get_affected_project"
      end
      # verify the required parameter 'vuln' is set
      if @api_client.config.client_side_validation && vuln.nil?
        fail ArgumentError, "Missing the required parameter 'vuln' when calling VulnerabilityApi.get_affected_project"
      end
      # resource path
      local_var_path = '/v1/vulnerability/source/{source}/vuln/{vuln}/projects'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'vuln' + '}', CGI.escape(vuln.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Project>' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_affected_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of all vulnerabilities
    # @param [Hash] opts the optional parameters
    # @return [Array<Vulnerability>]
    def get_all_vulnerabilities(opts = {})
      data, _status_code, _headers = get_all_vulnerabilities_with_http_info(opts)
      data
    end

    # Returns a list of all vulnerabilities
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Vulnerability>, Integer, Hash)>] Array<Vulnerability> data, response status code and response headers
    def get_all_vulnerabilities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_all_vulnerabilities ...'
      end
      # resource path
      local_var_path = '/v1/vulnerability'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Vulnerability>' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_all_vulnerabilities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of all vulnerabilities for a specific component
    # A valid UUID of the component may be specified, or the MD5 or SHA1 hash of the component
    # @param ident [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :suppressed Optionally includes suppressed vulnerabilities
    # @return [Array<Vulnerability>]
    def get_vulnerabilities_by_component(ident, opts = {})
      data, _status_code, _headers = get_vulnerabilities_by_component_with_http_info(ident, opts)
      data
    end

    # Returns a list of all vulnerabilities for a specific component
    # A valid UUID of the component may be specified, or the MD5 or SHA1 hash of the component
    # @param ident [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :suppressed Optionally includes suppressed vulnerabilities
    # @return [Array<(Array<Vulnerability>, Integer, Hash)>] Array<Vulnerability> data, response status code and response headers
    def get_vulnerabilities_by_component_with_http_info(ident, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerabilities_by_component ...'
      end
      # verify the required parameter 'ident' is set
      if @api_client.config.client_side_validation && ident.nil?
        fail ArgumentError, "Missing the required parameter 'ident' when calling VulnerabilityApi.get_vulnerabilities_by_component"
      end
      # resource path
      local_var_path = '/v1/vulnerability/component/{ident}'.sub('{' + 'ident' + '}', CGI.escape(ident.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'suppressed'] = opts[:'suppressed'] if !opts[:'suppressed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Vulnerability>' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerabilities_by_component\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of all vulnerabilities for a specific project
    # @param uuid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :suppressed Optionally includes suppressed vulnerabilities
    # @return [Array<Vulnerability>]
    def get_vulnerabilities_by_project(uuid, opts = {})
      data, _status_code, _headers = get_vulnerabilities_by_project_with_http_info(uuid, opts)
      data
    end

    # Returns a list of all vulnerabilities for a specific project
    # @param uuid [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :suppressed Optionally includes suppressed vulnerabilities
    # @return [Array<(Array<Vulnerability>, Integer, Hash)>] Array<Vulnerability> data, response status code and response headers
    def get_vulnerabilities_by_project_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerabilities_by_project ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VulnerabilityApi.get_vulnerabilities_by_project"
      end
      # resource path
      local_var_path = '/v1/vulnerability/project/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'suppressed'] = opts[:'suppressed'] if !opts[:'suppressed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Vulnerability>' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerabilities_by_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific vulnerability
    # @param uuid [String] The UUID of the vulnerability
    # @param [Hash] opts the optional parameters
    # @return [Vulnerability]
    def get_vulnerability_by_uuid(uuid, opts = {})
      data, _status_code, _headers = get_vulnerability_by_uuid_with_http_info(uuid, opts)
      data
    end

    # Returns a specific vulnerability
    # @param uuid [String] The UUID of the vulnerability
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vulnerability, Integer, Hash)>] Vulnerability data, response status code and response headers
    def get_vulnerability_by_uuid_with_http_info(uuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_by_uuid ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VulnerabilityApi.get_vulnerability_by_uuid"
      end
      # resource path
      local_var_path = '/v1/vulnerability/{uuid}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Vulnerability' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_by_uuid\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a specific vulnerability
    # @param source [String] 
    # @param vuln [String] 
    # @param [Hash] opts the optional parameters
    # @return [Vulnerability]
    def get_vulnerability_by_vuln_id(source, vuln, opts = {})
      data, _status_code, _headers = get_vulnerability_by_vuln_id_with_http_info(source, vuln, opts)
      data
    end

    # Returns a specific vulnerability
    # @param source [String] 
    # @param vuln [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Vulnerability, Integer, Hash)>] Vulnerability data, response status code and response headers
    def get_vulnerability_by_vuln_id_with_http_info(source, vuln, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.get_vulnerability_by_vuln_id ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling VulnerabilityApi.get_vulnerability_by_vuln_id"
      end
      # verify the required parameter 'vuln' is set
      if @api_client.config.client_side_validation && vuln.nil?
        fail ArgumentError, "Missing the required parameter 'vuln' when calling VulnerabilityApi.get_vulnerability_by_vuln_id"
      end
      # resource path
      local_var_path = '/v1/vulnerability/source/{source}/vuln/{vuln}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'vuln' + '}', CGI.escape(vuln.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Vulnerability' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#get_vulnerability_by_vuln_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes assignment of a vulnerability from a component
    # @param source [String] The vulnerability source
    # @param vuln_id [String] The vulnId
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unassign_vulnerability(source, vuln_id, component, opts = {})
      unassign_vulnerability_with_http_info(source, vuln_id, component, opts)
      nil
    end

    # Removes assignment of a vulnerability from a component
    # @param source [String] The vulnerability source
    # @param vuln_id [String] The vulnId
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unassign_vulnerability_with_http_info(source, vuln_id, component, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.unassign_vulnerability ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling VulnerabilityApi.unassign_vulnerability"
      end
      # verify the required parameter 'vuln_id' is set
      if @api_client.config.client_side_validation && vuln_id.nil?
        fail ArgumentError, "Missing the required parameter 'vuln_id' when calling VulnerabilityApi.unassign_vulnerability"
      end
      # verify the required parameter 'component' is set
      if @api_client.config.client_side_validation && component.nil?
        fail ArgumentError, "Missing the required parameter 'component' when calling VulnerabilityApi.unassign_vulnerability"
      end
      # resource path
      local_var_path = '/v1/vulnerability/source/{source}/vuln/{vulnId}/component/{component}'.sub('{' + 'source' + '}', CGI.escape(source.to_s)).sub('{' + 'vulnId' + '}', CGI.escape(vuln_id.to_s)).sub('{' + 'component' + '}', CGI.escape(component.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#unassign_vulnerability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes assignment of a vulnerability from a component
    # @param uuid [String] The UUID of the vulnerability
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def unassign_vulnerability1(uuid, component, opts = {})
      unassign_vulnerability1_with_http_info(uuid, component, opts)
      nil
    end

    # Removes assignment of a vulnerability from a component
    # @param uuid [String] The UUID of the vulnerability
    # @param component [String] The UUID of the component
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def unassign_vulnerability1_with_http_info(uuid, component, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.unassign_vulnerability1 ...'
      end
      # verify the required parameter 'uuid' is set
      if @api_client.config.client_side_validation && uuid.nil?
        fail ArgumentError, "Missing the required parameter 'uuid' when calling VulnerabilityApi.unassign_vulnerability1"
      end
      # verify the required parameter 'component' is set
      if @api_client.config.client_side_validation && component.nil?
        fail ArgumentError, "Missing the required parameter 'component' when calling VulnerabilityApi.unassign_vulnerability1"
      end
      # resource path
      local_var_path = '/v1/vulnerability/{uuid}/component/{component}'.sub('{' + 'uuid' + '}', CGI.escape(uuid.to_s)).sub('{' + 'component' + '}', CGI.escape(component.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#unassign_vulnerability1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an internal vulnerability
    # @param [Hash] opts the optional parameters
    # @option opts [Vulnerability] :body 
    # @return [Project]
    def update_vulnerability(opts = {})
      data, _status_code, _headers = update_vulnerability_with_http_info(opts)
      data
    end

    # Updates an internal vulnerability
    # @param [Hash] opts the optional parameters
    # @option opts [Vulnerability] :body 
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def update_vulnerability_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VulnerabilityApi.update_vulnerability ...'
      end
      # resource path
      local_var_path = '/v1/vulnerability'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'Project' 

      # auth_names
      auth_names = opts[:auth_names] || ['X-Api-Key']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VulnerabilityApi#update_vulnerability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#Dependency-Track API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.8.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module DependencyTracker
  class License
    attr_accessor :uuid

    attr_accessor :name

    attr_accessor :license_text

    attr_accessor :standard_license_template

    attr_accessor :standard_license_header

    attr_accessor :license_comments

    attr_accessor :license_id

    attr_accessor :is_osi_approved

    attr_accessor :is_fsf_libre

    attr_accessor :is_deprecated_license_id

    attr_accessor :see_also

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'uuid' => :'uuid',
        :'name' => :'name',
        :'license_text' => :'licenseText',
        :'standard_license_template' => :'standardLicenseTemplate',
        :'standard_license_header' => :'standardLicenseHeader',
        :'license_comments' => :'licenseComments',
        :'license_id' => :'licenseId',
        :'is_osi_approved' => :'isOsiApproved',
        :'is_fsf_libre' => :'isFsfLibre',
        :'is_deprecated_license_id' => :'isDeprecatedLicenseId',
        :'see_also' => :'seeAlso'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'uuid' => :'String',
        :'name' => :'String',
        :'license_text' => :'String',
        :'standard_license_template' => :'String',
        :'standard_license_header' => :'String',
        :'license_comments' => :'String',
        :'license_id' => :'String',
        :'is_osi_approved' => :'Boolean',
        :'is_fsf_libre' => :'Boolean',
        :'is_deprecated_license_id' => :'Boolean',
        :'see_also' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DependencyTracker::License` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DependencyTracker::License`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'uuid')
        self.uuid = attributes[:'uuid']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'license_text')
        self.license_text = attributes[:'license_text']
      end

      if attributes.key?(:'standard_license_template')
        self.standard_license_template = attributes[:'standard_license_template']
      end

      if attributes.key?(:'standard_license_header')
        self.standard_license_header = attributes[:'standard_license_header']
      end

      if attributes.key?(:'license_comments')
        self.license_comments = attributes[:'license_comments']
      end

      if attributes.key?(:'license_id')
        self.license_id = attributes[:'license_id']
      end

      if attributes.key?(:'is_osi_approved')
        self.is_osi_approved = attributes[:'is_osi_approved']
      end

      if attributes.key?(:'is_fsf_libre')
        self.is_fsf_libre = attributes[:'is_fsf_libre']
      end

      if attributes.key?(:'is_deprecated_license_id')
        self.is_deprecated_license_id = attributes[:'is_deprecated_license_id']
      end

      if attributes.key?(:'see_also')
        if (value = attributes[:'see_also']).is_a?(Array)
          self.see_also = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @uuid.nil?
        invalid_properties.push('invalid value for "uuid", uuid cannot be nil.')
      end

      if !@name.nil? && @name.to_s.length > 255
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 255.')
      end

      if !@name.nil? && @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[\p{White_Space}\p{L}\p{M}\p{S}\p{N}\p{P}]*$/)
      if !@name.nil? && @name !~ pattern
        invalid_properties.push("invalid value for \"name\", must conform to the pattern #{pattern}.")
      end

      if !@license_id.nil? && @license_id.to_s.length > 255
        invalid_properties.push('invalid value for "license_id", the character length must be smaller than or equal to 255.')
      end

      if !@license_id.nil? && @license_id.to_s.length < 1
        invalid_properties.push('invalid value for "license_id", the character length must be great than or equal to 1.')
      end

      pattern = Regexp.new(/^[a-zA-Z0-9_.\-+]*$/)
      if !@license_id.nil? && @license_id !~ pattern
        invalid_properties.push("invalid value for \"license_id\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @uuid.nil?
      return false if !@name.nil? && @name.to_s.length > 255
      return false if !@name.nil? && @name.to_s.length < 1
      return false if !@name.nil? && @name !~ Regexp.new(/^[\p{White_Space}\p{L}\p{M}\p{S}\p{N}\p{P}]*$/)
      return false if !@license_id.nil? && @license_id.to_s.length > 255
      return false if !@license_id.nil? && @license_id.to_s.length < 1
      return false if !@license_id.nil? && @license_id !~ Regexp.new(/^[a-zA-Z0-9_.\-+]*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 255
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 255.'
      end

      if !name.nil? && name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[\p{White_Space}\p{L}\p{M}\p{S}\p{N}\p{P}]*$/)
      if !name.nil? && name !~ pattern
        fail ArgumentError, "invalid value for \"name\", must conform to the pattern #{pattern}."
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] license_id Value to be assigned
    def license_id=(license_id)
      if !license_id.nil? && license_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "license_id", the character length must be smaller than or equal to 255.'
      end

      if !license_id.nil? && license_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "license_id", the character length must be great than or equal to 1.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9_.\-+]*$/)
      if !license_id.nil? && license_id !~ pattern
        fail ArgumentError, "invalid value for \"license_id\", must conform to the pattern #{pattern}."
      end

      @license_id = license_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          uuid == o.uuid &&
          name == o.name &&
          license_text == o.license_text &&
          standard_license_template == o.standard_license_template &&
          standard_license_header == o.standard_license_header &&
          license_comments == o.license_comments &&
          license_id == o.license_id &&
          is_osi_approved == o.is_osi_approved &&
          is_fsf_libre == o.is_fsf_libre &&
          is_deprecated_license_id == o.is_deprecated_license_id &&
          see_also == o.see_also
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [uuid, name, license_text, standard_license_template, standard_license_header, license_comments, license_id, is_osi_approved, is_fsf_libre, is_deprecated_license_id, see_also].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        DependencyTracker.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

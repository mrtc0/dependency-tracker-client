=begin
#Dependency-Track API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.8.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module DependencyTracker
  class AnalysisRequest
    attr_accessor :project

    attr_accessor :component

    attr_accessor :vulnerability

    attr_accessor :analysis_state

    attr_accessor :comment

    attr_accessor :suppressed

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'project' => :'project',
        :'component' => :'component',
        :'vulnerability' => :'vulnerability',
        :'analysis_state' => :'analysisState',
        :'comment' => :'comment',
        :'suppressed' => :'suppressed'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'project' => :'String',
        :'component' => :'String',
        :'vulnerability' => :'String',
        :'analysis_state' => :'String',
        :'comment' => :'String',
        :'suppressed' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DependencyTracker::AnalysisRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DependencyTracker::AnalysisRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'component')
        self.component = attributes[:'component']
      end

      if attributes.key?(:'vulnerability')
        self.vulnerability = attributes[:'vulnerability']
      end

      if attributes.key?(:'analysis_state')
        self.analysis_state = attributes[:'analysis_state']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'suppressed')
        self.suppressed = attributes[:'suppressed']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      if !@project.nil? && @project !~ pattern
        invalid_properties.push("invalid value for \"project\", must conform to the pattern #{pattern}.")
      end

      if @component.nil?
        invalid_properties.push('invalid value for "component", component cannot be nil.')
      end

      pattern = Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      if @component !~ pattern
        invalid_properties.push("invalid value for \"component\", must conform to the pattern #{pattern}.")
      end

      if @vulnerability.nil?
        invalid_properties.push('invalid value for "vulnerability", vulnerability cannot be nil.')
      end

      pattern = Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      if @vulnerability !~ pattern
        invalid_properties.push("invalid value for \"vulnerability\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[\p{White_Space}\p{L}\p{M}\p{S}\p{N}\p{P}\n\r\t]*$/)
      if !@comment.nil? && @comment !~ pattern
        invalid_properties.push("invalid value for \"comment\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@project.nil? && @project !~ Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      return false if @component.nil?
      return false if @component !~ Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      return false if @vulnerability.nil?
      return false if @vulnerability !~ Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      analysis_state_validator = EnumAttributeValidator.new('String', ["EXPLOITABLE", "IN_TRIAGE", "FALSE_POSITIVE", "NOT_AFFECTED", "NOT_SET"])
      return false unless analysis_state_validator.valid?(@analysis_state)
      return false if !@comment.nil? && @comment !~ Regexp.new(/^[\p{White_Space}\p{L}\p{M}\p{S}\p{N}\p{P}\n\r\t]*$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] project Value to be assigned
    def project=(project)
      pattern = Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      if !project.nil? && project !~ pattern
        fail ArgumentError, "invalid value for \"project\", must conform to the pattern #{pattern}."
      end

      @project = project
    end

    # Custom attribute writer method with validation
    # @param [Object] component Value to be assigned
    def component=(component)
      if component.nil?
        fail ArgumentError, 'component cannot be nil'
      end

      pattern = Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      if component !~ pattern
        fail ArgumentError, "invalid value for \"component\", must conform to the pattern #{pattern}."
      end

      @component = component
    end

    # Custom attribute writer method with validation
    # @param [Object] vulnerability Value to be assigned
    def vulnerability=(vulnerability)
      if vulnerability.nil?
        fail ArgumentError, 'vulnerability cannot be nil'
      end

      pattern = Regexp.new(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/)
      if vulnerability !~ pattern
        fail ArgumentError, "invalid value for \"vulnerability\", must conform to the pattern #{pattern}."
      end

      @vulnerability = vulnerability
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] analysis_state Object to be assigned
    def analysis_state=(analysis_state)
      validator = EnumAttributeValidator.new('String', ["EXPLOITABLE", "IN_TRIAGE", "FALSE_POSITIVE", "NOT_AFFECTED", "NOT_SET"])
      unless validator.valid?(analysis_state)
        fail ArgumentError, "invalid value for \"analysis_state\", must be one of #{validator.allowable_values}."
      end
      @analysis_state = analysis_state
    end

    # Custom attribute writer method with validation
    # @param [Object] comment Value to be assigned
    def comment=(comment)
      pattern = Regexp.new(/^[\p{White_Space}\p{L}\p{M}\p{S}\p{N}\p{P}\n\r\t]*$/)
      if !comment.nil? && comment !~ pattern
        fail ArgumentError, "invalid value for \"comment\", must conform to the pattern #{pattern}."
      end

      @comment = comment
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          project == o.project &&
          component == o.component &&
          vulnerability == o.vulnerability &&
          analysis_state == o.analysis_state &&
          comment == o.comment &&
          suppressed == o.suppressed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [project, component, vulnerability, analysis_state, comment, suppressed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        DependencyTracker.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end

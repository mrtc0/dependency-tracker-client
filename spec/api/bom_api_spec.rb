=begin
#Dependency-Track API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.8.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for DependencyTacker::BomApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BomApi' do
  before do
    # run before each test
    @api_instance = DependencyTacker::BomApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BomApi' do
    it 'should create an instance of BomApi' do
      expect(@api_instance).to be_instance_of(DependencyTacker::BomApi)
    end
  end

  # unit tests for export_component_as_cyclone_dx
  # Returns dependency metadata for a specific component in CycloneDX format
  # @param uuid The UUID of the project to export
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'export_component_as_cyclone_dx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_components_as_cyclone_dx
  # Returns dependency metadata for all components in CycloneDX format
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'export_components_as_cyclone_dx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for export_project_as_cyclone_dx
  # Returns dependency metadata for a project in CycloneDX format
  # @param uuid The UUID of the project to export
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'export_project_as_cyclone_dx test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for is_token_being_processed
  # Determines if there are any tasks associated with the token that are being processed, or in the queue to be processed.
  # This endpoint is intended to be used in conjunction with uploading a supported BOM document. Upon upload, a token will be returned. The token can then be queried using this endpoint to determine if any tasks (such as vulnerability analysis) is being performed on the BOM. A value of true indicates processing is occurring. A value of false indicates that no processing is occurring for the specified token. However, a value of false also does not confirm the token is valid, only that no processing is associated with the specified token.
  # @param uuid The UUID of the token to query
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'is_token_being_processed test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_bom
  # Upload a supported bill of material format document
  # Expects CycloneDX or SPDX (text or RDF) along and a valid project UUID. If a UUID is not specified, than the projectName and projectVersion must be specified. Optionally, if autoCreate is specified and &#39;true&#39; and the project does not exist, the project will be created. In this scenario, the principal making the request will additionally need the PORTFOLIO_MANAGEMENT or PROJECT_CREATION_UPLOAD permission.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :project 
  # @option opts [Boolean] :auto_create 
  # @option opts [String] :project_name 
  # @option opts [String] :project_version 
  # @return [nil]
  describe 'upload_bom test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_bom1
  # Upload a supported bill of material format document
  # Expects CycloneDX or SPDX (text or RDF) along and a valid project UUID. If a UUID is not specified, than the projectName and projectVersion must be specified. Optionally, if autoCreate is specified and &#39;true&#39; and the project does not exist, the project will be created. In this scenario, the principal making the request will additionally need the PORTFOLIO_MANAGEMENT or PROJECT_CREATION_UPLOAD permission.
  # @param [Hash] opts the optional parameters
  # @option opts [BomSubmitRequest] :body 
  # @return [nil]
  describe 'upload_bom1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
